/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { AttributeParams, attributeParamsBeet } from '../types/AttributeParams';

/**
 * @category Instructions
 * @category Attribute
 * @category generated
 */
export type AttributeInstructionArgs = {
  attributeParams: AttributeParams;
};
/**
 * @category Instructions
 * @category Attribute
 * @category generated
 */
export const attributeStruct = new beet.FixableBeetArgsStruct<
  AttributeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['attributeParams', attributeParamsBeet],
  ],
  'AttributeInstructionArgs',
);

export const attributeInstructionDiscriminator = [242, 187, 207, 90, 187, 238, 242, 237];

/**
 * Creates a _Attribute_ instruction.
 *
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Attribute
 * @category generated
 */
export function createAttributeInstruction(
  args: AttributeInstructionArgs,
  programId = new web3.PublicKey('rwdD3F6CgoCAoVaxcitXAeWRjQdiGc5AVABKCpQSMfd'),
) {
  const [data] = attributeStruct.serialize({
    instructionDiscriminator: attributeInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
