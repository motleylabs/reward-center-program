/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { CreateListingParams, createListingParamsBeet } from '../types/CreateListingParams';

/**
 * @category Instructions
 * @category CreateListing
 * @category generated
 */
export type CreateListingInstructionArgs = {
  createListingParams: CreateListingParams;
};
/**
 * @category Instructions
 * @category CreateListing
 * @category generated
 */
export const createListingStruct = new beet.BeetArgsStruct<
  CreateListingInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['createListingParams', createListingParamsBeet],
  ],
  'CreateListingInstructionArgs',
);
/**
 * Accounts required by the _createListing_ instruction
 *
 * @property [] auctionHouseProgram
 * @property [_writable_] listing
 * @property [] rewardCenter
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] tokenAccount
 * @property [] metadata
 * @property [] authority
 * @property [] auctionHouse
 * @property [_writable_] auctionHouseFeeAccount
 * @property [_writable_] sellerTradeState
 * @property [_writable_] freeSellerTradeState
 * @property [] ahAuctioneerPda
 * @property [] programAsSigner
 * @category Instructions
 * @category CreateListing
 * @category generated
 */
export type CreateListingInstructionAccounts = {
  auctionHouseProgram: web3.PublicKey;
  listing: web3.PublicKey;
  rewardCenter: web3.PublicKey;
  wallet: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  metadata: web3.PublicKey;
  authority: web3.PublicKey;
  auctionHouse: web3.PublicKey;
  auctionHouseFeeAccount: web3.PublicKey;
  sellerTradeState: web3.PublicKey;
  freeSellerTradeState: web3.PublicKey;
  ahAuctioneerPda: web3.PublicKey;
  programAsSigner: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const createListingInstructionDiscriminator = [18, 168, 45, 24, 191, 31, 117, 54];

/**
 * Creates a _CreateListing_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateListing
 * @category generated
 */
export function createCreateListingInstruction(
  accounts: CreateListingInstructionAccounts,
  args: CreateListingInstructionArgs,
  programId = new web3.PublicKey('rwdD3F6CgoCAoVaxcitXAeWRjQdiGc5AVABKCpQSMfd'),
) {
  const [data] = createListingStruct.serialize({
    instructionDiscriminator: createListingInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.auctionHouseProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.listing,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardCenter,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.auctionHouse,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.auctionHouseFeeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellerTradeState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.freeSellerTradeState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ahAuctioneerPda,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.programAsSigner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
